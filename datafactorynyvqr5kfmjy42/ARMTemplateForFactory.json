{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datafactorynyvqr5kfmjy42"
		},
		"ArmtemplateStorageLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ArmtemplateStorageLinkedService'"
		},
		"SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer1'",
			"defaultValue": "Integrated Security=True;Data Source=@{linkedService().ServerName};Initial Catalog=@{linkedService().DBName}"
		},
		"azure_storage_demo_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azure_storage_demo'"
		},
		"databrickslinkservice_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'databrickslinkservice'"
		},
		"SqlServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().ServerUser}"
		},
		"akv_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://azkv-43.vault.azure.net/"
		},
		"databrickslinkservice_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "1219-215851-zcvyvljy"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ArmtemplateSampleCopyPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MyCopyActivity",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ArmtemplateTestDatasetIn",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ArmtemplateTestDatasetOut",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-18T12:01:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ArmtemplateTestDatasetIn')]",
				"[concat(variables('factoryId'), '/datasets/ArmtemplateTestDatasetOut')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dbdatacopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copydbdata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"parallelCopies": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {
									"ServerName_frompl": {
										"value": "@pipeline().parameters.ServerName_pipeline",
										"type": "Expression"
									},
									"ServerUser_frompl": {
										"value": "@pipeline().parameters.ServerUser_pipeline",
										"type": "Expression"
									},
									"ServerPass_frompl": {
										"value": "@pipeline().parameters.SeverPass_pipeline",
										"type": "Expression"
									},
									"DBName_frompl": {
										"value": "@pipeline().parameters.DBName_pipeline",
										"type": "Expression"
									},
									"DBTable": {
										"value": "@pipeline().parameters.DBTable_frompl",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "onpremtocloudtest",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ServerName_pipeline": {
						"type": "string"
					},
					"DBName_pipeline": {
						"type": "string"
					},
					"ServerUser_pipeline": {
						"type": "string"
					},
					"SeverPass_pipeline": {
						"type": "string"
					},
					"DBTable_frompl": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/datasets/onpremtocloudtest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demo_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Avgsalarybycounty",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "demo_avg_salaries",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"salarydata": {},
									"avgsalarybycounty": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-07T18:16:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/demo_avg_salaries')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/wcanalysis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "wcanalysis",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "worldcupanalysis",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"wcgroups": {},
									"wcsquad": {},
									"savedata": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-08T11:41:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/worldcupanalysis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ArmtemplateTestDatasetIn')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ArmtemplateStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "moviesDB2.csv",
						"folderPath": "input",
						"container": "datafactory"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ArmtemplateStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ArmtemplateTestDatasetOut')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ArmtemplateStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "datafactory"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ArmtemplateStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference",
					"parameters": {
						"ServerName": {
							"value": "@dataset().ServerName_frompl",
							"type": "Expression"
						},
						"DBName": {
							"value": "@dataset().DBName_frompl",
							"type": "Expression"
						},
						"ServerUser": {
							"value": "@dataset().ServerUser_frompl",
							"type": "Expression"
						},
						"ServerPass": {
							"value": "@dataset().ServerPass_frompl",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"ServerName_frompl": {
						"type": "string"
					},
					"ServerUser_frompl": {
						"type": "string"
					},
					"ServerPass_frompl": {
						"type": "string"
					},
					"DBName_frompl": {
						"type": "string"
					},
					"DBTable": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().DBTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/avg_salary_by_county')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_storage_demo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demoazureblob"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_storage_demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/avg_salary_eu')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_storage_demo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Average Net Salary",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "AVG_SALARY.xlsx",
						"container": "demoazureblob"
					},
					"range": "",
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_storage_demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/avgbycounty')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_storage_demo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demoazureblob"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_storage_demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/avgsalaryeu')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_storage_demo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Average Net Salary",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "AVG_SALARY.xlsx",
						"container": "demoazureblob"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Month",
						"type": "String"
					},
					{
						"name": "Average Net Salary RON",
						"type": "String"
					},
					{
						"name": "County",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_storage_demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/avgwcgoals')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_storage_demo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "worldcup"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_storage_demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onpremtocloudtest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_storage_demo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demoazureblob"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_storage_demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/wcgroups')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_storage_demo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "2022_world_cup_groups.csv",
						"container": "worldcup"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Group",
						"type": "String"
					},
					{
						"name": "Team",
						"type": "String"
					},
					{
						"name": "FIFA Ranking",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_storage_demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/wcsquad')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure_storage_demo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "2022_world_cup_squads.csv",
						"container": "worldcup"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Team",
						"type": "String"
					},
					{
						"name": "Position",
						"type": "String"
					},
					{
						"name": "Player",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "Caps",
						"type": "String"
					},
					{
						"name": "Goals",
						"type": "String"
					},
					{
						"name": "WC Goals",
						"type": "String"
					},
					{
						"name": "League",
						"type": "String"
					},
					{
						"name": "Club",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azure_storage_demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ArmtemplateStorageLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ArmtemplateStorageLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ServerName": {
						"type": "string"
					},
					"DBName": {
						"type": "string"
					},
					"ServerUser": {
						"type": "string"
					},
					"ServerPass": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_connectionString')]",
					"userName": "[parameters('SqlServer1_properties_typeProperties_userName')]",
					"password": "@{linkedService().ServerPass}"
				},
				"connectVia": {
					"referenceName": "selfhostedruntimeonprem",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/selfhostedruntimeonprem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/akv')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('akv_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/azure_storage_demo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('azure_storage_demo_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/databrickslinkservice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4220713526708772.12.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('databrickslinkservice_accessToken')]"
					},
					"existingClusterId": "[parameters('databrickslinkservice_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/selfhostedruntimeonprem')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/demo_avg_salaries')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "avgsalaryeu",
								"type": "DatasetReference"
							},
							"name": "salarydata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "avg_salary_by_county",
								"type": "DatasetReference"
							},
							"name": "avgsalarybycounty"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "select1"
						},
						{
							"name": "AvgbyCounty"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Year as string,",
						"          Month as string,",
						"          {Average Net Salary RON} as string,",
						"          County as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> salarydata",
						"salarydata cast(output(",
						"          {Average Net Salary RON} as integer '000'",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 select(mapColumn(",
						"          AverageSalary = {Average Net Salary RON},",
						"          County",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(County),",
						"     column1 = avg(AverageSalary)) ~> AvgbyCounty",
						"AvgbyCounty sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> avgsalarybycounty"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/avgsalaryeu')]",
				"[concat(variables('factoryId'), '/datasets/avg_salary_by_county')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/worldcupanalysis')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "wcgroups",
								"type": "DatasetReference"
							},
							"name": "wcgroups",
							"description": "Add wc groups"
						},
						{
							"dataset": {
								"referenceName": "wcsquad",
								"type": "DatasetReference"
							},
							"name": "wcsquad",
							"description": "Add squad wc"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "avgwcgoals",
								"type": "DatasetReference"
							},
							"name": "savedata"
						}
					],
					"transformations": [
						{
							"name": "groupsquad"
						},
						{
							"name": "squadgoals",
							"description": "Add goals agg by squad"
						},
						{
							"name": "casttypes"
						},
						{
							"name": "squaddata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Group as string,",
						"          Team as string,",
						"          {FIFA Ranking} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> wcgroups",
						"source(output(",
						"          ID as string,",
						"          Team as string,",
						"          Position as string,",
						"          Player as string,",
						"          Age as string,",
						"          Caps as string,",
						"          Goals as string,",
						"          {WC Goals} as string,",
						"          League as string,",
						"          Club as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> wcsquad",
						"wcgroups, squaddata join(Team == SquadTeam,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> groupsquad",
						"casttypes aggregate(groupBy(Player),",
						"     {WC Goals} = avg({WC Goals})) ~> squadgoals",
						"groupsquad cast(output(",
						"          {WC Goals} as integer '000'",
						"     ),",
						"     errors: true) ~> casttypes",
						"wcsquad select(mapColumn(",
						"          ID,",
						"          SquadTeam = Team,",
						"          Position,",
						"          Player,",
						"          Age,",
						"          Caps,",
						"          Goals,",
						"          {WC Goals},",
						"          League,",
						"          Club",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> squaddata",
						"squadgoals sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> savedata"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/wcgroups')]",
				"[concat(variables('factoryId'), '/datasets/wcsquad')]",
				"[concat(variables('factoryId'), '/datasets/avgwcgoals')]"
			]
		}
	]
}